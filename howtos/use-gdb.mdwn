# How to use gdb

## Foreword

One should note that X is responsible for VT switching, meaning
switching between an X session and console terminals. In other words,
`Ctrl+Alt+Fn` is handled by X. If X is stopped, for example because
it’s running under `gdb`, one can no longer switch to another
VT. That’s why we’re recommending using a second machine to debug
X. Nevertheless, here are some instructions to attempt debugging X
with a single machine.

## One-machine approach

From a console (let‘s assume it’s `vt1`), open a `root` terminal.

Start a loop which will bring you back to this console after a given
delay, just in case. In this example, every 60 seconds:

    while :; do sleep 60; chvt 1; done &

The ampersand (`&`) at the end makes it a background job.

## Two-machine approach

That’s simpler, but then you need a second machine. Just log into the
first machine from the second one, using `ssh`.

## Actual gdb work

### Attaching X from gdb

The way of starting X doesn’t really matter, as `gdb` makes it
possible to attach a running process. If there’s a single X instance
running, that will do the job:

    # gdb attach $(pidof X)
    [---GDB starts---]
    (gdb) handle SIGPIPE nostop
    (gdb) cont

If there are several instances, one can use `ps aux` to determine the
PID of the appropriate instance (2nd column), and then attach `$pid`:

    # gdb attach $pid
    [---GDB starts---]
    (gdb) handle SIGPIPE nostop
    (gdb) cont

### Starting X from gdb

In case X crashes at start-up,
one way of starting X from `gdb` is the following:

    # gdb --args Xorg :0
    [---GDB starts---]
    (gdb) handle SIGPIPE nostop
    (gdb) run

In this case, the only parameter is the display, but more parameters
can be added.
